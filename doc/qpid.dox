/*! @page qpid_desc Closed-loop PID Controller
* @tableofcontents
* A PID controller seeks to keep some input variable close to a desired setpoint
* by adjusting an output. The way in which it does this can be 'tuned' by 
* adjusting three parameters (Proportinal,Integral,Derivative).
*
* qLibs provides the \ref qpid implementation, which, apart from the simplified 
* overview representation of the PID controller, also addresses some practical
* issues and includes additional features as listed below:
* 
* - Noisy Derivative Contributions (Derivative filter)
* - Automatic Anti-windup control
* - Tracking mode (bumpless transfer)
* - Auto-tunning
* - Additive MRAC
*
*
* @section qpid_approach PID Controller approach
*
* The mathematical model and practical loop uses a direct control 
* action for all the PID terms, which means an increasing positive error 
* results in an increasing positive control output correction.
*
* The overall control function implemented by \ref qpid is given by:
*
* \f$ v(t)= \psi(t)r(t) + [ K_{c}e(t) + K_{i}\int [ e(t) + c(t-1) ]dt + K_{d}f_{d}(t) ] \f$ 
*
* \f$ u(t) = \text{Sat}[ v(t), u_{min}, u_{max} ]\f$ 
*
* where \f$r(t)\f$ the set-point, \f$ e(t) = r(t) - y(t) \f$ its the error
* \f$y(t)\f$ the process output, \f$K_{c},K_{i},K_{d}\f$ the PID gain respectively 
*  and \f$u(t)\f$ the control action.
*
* \f$\psi(t)\f$ the adaptive gain from the additive MRAC (later explained)
*
* As shown above, the derivative term \f$ f_{d}(t)\f$ is the output of a 
* low-pass filter who take the error derivative as input.
*
* \f$ f_{d}(t) = \text{LPF}[ \frac{de(t)}{dt} ]\f$ 
*
* and \f$ c(t)\f$, the Anti-Windup and tracking mode feedback, with \f$K_{w}\f$
* and \f$K_{T}\f$ as the ajustment parameters respectively.
*
* \f$ c(t) = K_{w}[ u(t) - v(t) ] + K_{T}[ r_{t}(t) - u(t) ]\f$
*
* <center>
* @htmlonly
* <!DOCTYPE html>
* <html>
* <head>
* <title>qpid</title>
* <meta charset="utf-8"/>
* </head>
* <body><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;app.diagrams.net\&quot; modified=\&quot;2022-10-21T03:03:23.847Z\&quot; agent=\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36\&quot; etag=\&quot;K22t4fRUEXtMH1okVdxy\&quot; version=\&quot;20.4.2\&quot; type=\&quot;google\&quot;&gt;&lt;diagram id=\&quot;Y54Sw13SpVrxC9X4pJjL\&quot; name=\&quot;PÃ¡gina-1\&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div>
* <script type="text/javascript" src="https://viewer.diagrams.net/js/viewer-static.min.js"></script>
* </body>
* </html>
* @endhtmlonly
* <em>PID Implementation</em>
* </center>
*
* @section qpid_create Creating a PID Controller
*
* Before you start using a controller, it must be instantiated first
* via the \ref qPID_controller_t type and then configured using the \ref qPID_Setup() API, 
* where you can define the PID gains and time step.
*
*  Example: Instantiating an configuring a PID controller:
*  @code{.c}
*  qPID_controller_t control;
*  const float kc = 1.0f, ki = 0.1f, kd = 0.0f;
*  const float dt = 0.01f; // time-step of 10mS
*  int ret;
*
*  ret = qPID_Setup( &control, kc, ki, kd, dt );
*  if ( 0 == ret ) {
*      // error, pid controller cant be configured
*  }
*  @endcode
*
*
*  @section qfpid_usage Usign the controller
*
*  The following example illustrates how a PID controller can be used to regulate
*  the speed of a DC motor. PID control operates on a separate task running  
*  periodically  at a rate of 50mS. The speed measurement is being read through
*  an analog input and then scaled to the appropriate units (RPM). The \ref qPID_Control() 
*  function will be in charge of computing the control action and  updating the internal
*  states of the controller. Then, the control output gets scaled-back in order to
*  send the control command by using the PWM(Pulse Width Modulation) module. 
*
*  @subsection qpid_ex1 Example: Speed control using a PID controller:
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  
*  const TickType_t  dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  float SetPoint = 300.0f; // desired motor speed 300rpm
*  
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      float processMeasurement;
*      float controlOutput;
*      for ( ;; ) {
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, SetPoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      int ret;
*      
*      BSP_SystemInit( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 ,NULL );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*
*
* @section qpid_mrac Additive MRAC (Model Reference Adaptive Control)
*
* Model Reference Adaptive Control (MRAC) is a strategy where the controller 
* of the closed-loop is adapted by an adjustment mechanism, which takes \f$ y_{m}(t) \f$ 
* from a reference model as input and tries to adjust the controller output \f$v(t)\f$. 
* The adjustment mechanism used by \ref qpid is the enhanced MIT-rule approach,
* which adapts a feed-forward gain by the error between the system \f$ y(t) \f$
* and a reference model \f$ y_{m}(t) \f$, therefore is the so-called Gradient approach.
*
*
* \f$ e_{m}(t) = y(t) - y_{m}(t)\f$ 
*
* \f$ \delta(t) = -\gamma  \frac{ e_{m}(t) y_{m}(t) }{ \beta + y_{m}^{2}(t)  }  \f$ 
*
* where \f$\gamma(t)\f$ is the adaptation gain and \f$\beta(t)\f$ is introduced 
* to remove the problem of the possible division by zero if \f$y_{m}^{2}(t) \f$
* gets too small. 
*
* The MRAC adaptation is then computed by integrating the \f$\delta(t)\f$ term 
* as follows:
*
*  \f$ \psi(t) = \int \delta(t) dt \f$ 
*
* This method can be used to adapt to slower changes but can become unstable for
* abrupt changes to the system. Therefore, this implementation uses a so called 
* modified MRAC (M-MRAC) where the adaptation is later added to a PID controller, 
* being the MRAC the additive loop.
* 
* Abrupt changes to the system are absorbed by the  PID controller, while the 
* change of the dynamics will still be handled by the MIT gain \f$\psi(t)\f$. 
* This results in the equation of the control function presented at the 
* beginning of this section.
*
* To use the additive MRAC, you should first instantiate a reference model and 
* then, enable the MRAC by using the \ref qPID_SetMRAC() API. Here, you must provide
* a pointer to the output of the reference model and the adaptation gain \f$\gamma(t)\f$
*
*  @subsection qpid_ex2 Example: Speed control with PID controller with an additive MRAC:
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  #include "qltisys.h" //to create the reference model
*  
*  #define REF_MODEL_ORDER   ( 1 )
*
*  const TickType_t dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      qLTISys_t ref_model;
*      float num[ REF_MODEL_ORDER+1 ] = { 0.0f, 1.0f, };
*      float den[ REF_MODEL_ORDER+1 ] = { 3.0f, 1.0f, };
*      float processMeasurement;
*      float SetPoint = 300.0f; // desired motor speed 300rpm
*      float refmodel_output = 0.0f;
*      float controlOutput = 0.0f;
*
*      qLTISys_Setup( &ref_model, num, den, x, 0, REF_MODEL_ORDER+1, (float)dt/1000.0f ) );
*      qPID_SetMRAC( controller, &refmodel_output, 0.01f );
*      for ( ;; ) {
           refmodel_output = qLTISys_Excite( &ref_model, controlOutput );
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, SetPoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      int ret;
*      
*      BSP_SystemInit( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 ,NULL );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*
* @section qpid_autotune Autotunning
*
* Autotuning can eliminate much of the trial and error of a manual tuning 
* approach, especially if you do not have a lot of loop tuning experience. 
* Performing the autotuning procedure will get the tuning parameters close to 
* their optimal values, but additional manual tuning may be required to get 
* the tuning parameters to their optimal values.
*
* The Autotune feature for the controller will only run for a limited amount of time
* after it gets enabled. In other words, autotuning does not run continuously 
* during operation. Whenever there is a substantial change in the process 
* dynamics, the tuning process will need to be repeated in order to derive new 
* gains required for optimal control.
*
* Autotunning is performed by using the following recursive algorithm:
*
* \f$ L(t) =  \frac{ P(t-1)\phi }{ \lambda + \phi^{T}P(t-1)\phi  } \f$
*
* \f$\theta(t) = \theta(t-1) + L[ y(t) - \phi^{T}\theta(t)  ] \f$
*
* \f$ P(t) = \lambda^{-1}[ I - L(t)+\phi^{T}]P(t-1) \f$
*
* \f$ \theta(t) = \begin{bmatrix} \theta_{1}(t) & \theta_{2}(t) \end{bmatrix}^T  \f$ 
* and \f$ \phi(t) = \begin{bmatrix} -y(t-1) & u(t-1) \end{bmatrix}^T  \f$ 
*
* \f$ g(t) = \frac{ (1 - \mu)\theta_{2}(t) }{ 1 + \theta_{1} } + \mu g(t-1)  \f$
*
* \f$ \tau(t) = \frac{ ( \mu - 1 )dt }{ ln( |\theta_{1}| ) } + \mu \tau(t-1)  \f$
*
* \f$ K_{c}(t) = \alpha \frac{ r_{2} \tau(t) }{ g(t)dt } \f$
*
* \f$ K_{i}(t) = \alpha \frac{ g(t)[ 0.54 + 0.33r_{1} ] }{ r_{2}dt } \f$
*
* \f$ K_{c}(t) = \alpha \frac{ K_{c}(t)dt }{ r_{2} } \f$
*
* where  \f$ r_{1} = dt/\tau(t) \f$  and \f$ r_{2} = 1.35 + 0.25r_{1} \f$ 
*
* and the remaining parameters \f$\mu\f$, \f$\alpha\f$, \f$\lambda\f$ are internally
* computed for best performance.
*
* @subsection qpid_autotune_usage Autotunning Usage
*
* In order to use the autotuner, you must first instantiate the \ref qPID_AutoTunning_t
* object and bind it to a previously configured PID controller by using the 
* \ref qPID_BindAutoTunning().
*
* After this, you can enable auto tuning via \ref qPID_EnableAutoTunning() 
* for a defined number of intervals. When the autotune ends, the resulting PID
* gains will be applied to the bounded controller.
* 
* @subsection qpid_ex3 Example: Speed control with PID controller and autotunning:
* This example takes avantage of the FreeRTOS task notifications to enable the
* autotunningm when a rising-edge is detected on a certain digital input. Autotuning
* is enabled for 5 sec. Note that the setpoint is briefly modified during this 
* process to stimulate the process. Upon completion, the setpoint is restored to 
* its original value.
*
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  
*  #define REF_MODEL_ORDER   ( 1 )
*
*  const TickType_t dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  TaskHandle_t pid_task;
*  
*  void gpio_Int_Handler( void ) 
*  {
*      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*      vTaskNotifyGiveFromISR( pid_task, &xHigherPriorityTaskWoken);
*      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
*      HAL_GPIO_ClearStatusFlag();
*  }
*
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      float processMeasurement;
*      float SetPoint = 300.0f; // desired motor speed 300rpm
*      float tmpSetPoint = 320.0f;
*      float *p_setpoint  = &SetPoint;  
*      float refmodel_output = 0.0f;
*      float controlOutput = 0.0f;
*      uint32_t notification_autotune_enable;
*
*      qLTISys_Setup( &ref_model, num, den, x, 0, REF_MODEL_ORDER+1, (float)dt/1000.0f ) );
*      qPID_SetMRAC( controller, &refmodel_output, 0.01f );
*      for ( ;; ) {
*          notification_autotune_enable = ulTaskNotifyTake( pdTRUE, 0 ); // dont wait
*          if ( notification_autotune_enable ) {
*              p_setpoint = &tmpSetPoint; 
*              qPID_EnableAutoTunning( controller, 100 ); //enable for 5 seconds ( 100*50mS )
*          }
*          if ( qPID_AutoTunningComplete( controller) ) {
*              p_setpoint = &SetPoint;
*              qPID_EnableAutoTunning( controller, 0uL ); //disable
*          }
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, *p_setpoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      qPID_AutoTunning_t at;
*      int ret;
*      
*      BSP_SystemInit( );
*      HAL_GPIO_Enable( GPIO12, GPIO_INPUT );
*      HAL_GPIO_SetInterruptMode( GPIO12, RISING_EDGE );
*      HAL_GPIO_EnableInterrupts( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      qPID_BindAutoTunning( &speedControl, &at );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 , &pid_task );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*/