/*! @page qpid_desc Closed-loop PID Controller
* @tableofcontents
* A Proportional Integral Derivative (PID) controller is an automatically 
* optimized and accurate control system responsible for ensuring that a 
* process remains as close to the desired value as possible regardless of 
* various disruptions. The controller compares the measured process variable  
* \f$ y(t)\f$ and a desired Setpoint \f$ r(t)\f$ (desired outcome). Based on 
* that comparison, the controller calculates the Proportional, Integral and 
* Derivative terms and adds them to obtain the output signal \f$ u(t) \f that 
* attempts to minimize the error. This output signal is then used to command
* the Final Control Element (e.g an actuator) that is in charge of operating 
* the process.
*
* Proportional is used to find out the error between the desired value and 
* actual value and is responsible for the corrective response. Integral is 
* applied to calculate all the past values of error and then integrate them to
* find out the Integral term. When error is expelled from the system this 
* integral stops increasing. The derivative is used to predict the expected 
* error values in future based on the present values. Controlling effect can be
* increased if the system has a rapid rate of change, which is also based on 
* Derivative. Combining all these three operations gives the name Proportional 
* Integral Derivative (PID) Controller.
*
* qLibs provides the \ref qpid implementation, which, apart from the simplified 
* overview representation of the PID controller, also addresses some practical
* issues and includes additional features as listed below:
* 
* - Noisy Derivative Contributions (Derivative filter)
* - Automatic Anti-windup control
* - Bumpless transfer
* - Auto-tunning
* - Additive MRAC
*
*
* @section qpid_approach PID Controller approach
*
* The mathematical model and practical loop uses a direct control 
* action for all the PID terms, which means an increasing positive error 
* results in an increasing positive control output correction.
*
* The overall control function implemented in ::qPID_Automatic mode is 
* given by:
*
* <center>
* \f$ v(t)= \psi(t)r(t) + [ K_{c}e(t) + K_{i}\int [ e(t) + c(t-1) ]dt + K_{d}f_{d}(t) ] \f$ 
*
* \f$ u(t) = \text{Sat}[ v(t), u_{min}, u_{max} ]\f$ 
*
* </center>
* where \f$r(t)\f$ the set-point, \f$ e(t) = r(t) - y(t) \f$ its the error
* \f$y(t)\f$ the process output, \f$K_{c},K_{i},K_{d}\f$ the PID gains respectively 
*  and \f$u(t)\f$ the control action.
*
* \f$\psi(t)\f$ the adaptive gain from the additive MRAC (later explained)
*
* As shown above, the derivative term \f$ f_{d}(t)\f$ is the output of a 
* low-pass filter who take raw derivative as input.
*
* <center> \f$ f_{d}(t) = \text{LPF}[ \frac{de(t)}{dt} ]\f$  </center>
*
* and \f$ c(t)\f$, the saturation feedback for the anti-windup, with \f$K_{w}\f$
* as the ajustment parameter.
*
* <center> \f$ c(t) = K_{w}[ u(t) - v(t) ] \f$ </center>
*
* <center>
* @htmlonly
* <!DOCTYPE html>
* <html>
* <head>
* <title>qpid</title>
* <meta charset="utf-8"/>
* </head>
* <body><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;app.diagrams.net\&quot; modified=\&quot;2022-10-25T19:12:47.892Z\&quot; agent=\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36\&quot; etag=\&quot;Nv_7YvHx5ZYOPMX_SnPj\&quot; version=\&quot;20.5.1\&quot; type=\&quot;google\&quot;&gt;&lt;diagram id=\&quot;Y54Sw13SpVrxC9X4pJjL\&quot; name=\&quot;PÃ¡gina-1\&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div>
* <script type="text/javascript" src="https://viewer.diagrams.net/js/viewer-static.min.js"></script>
* </body>
* </html>
* @endhtmlonly
* <em>PID Implementation</em>
* </center>
*
* @section qpid_maninput Manual Mode 
* When the operation mode is changed to ::qPID_Manual, the feedback is disconnected and 
* the controller works in open loop being commanded by the manual input \f$ m(t) \f$. 
* Since the controller is a dynamic system, it is necessary to make sure that
* the state of the system is correct when switching the controller between manual
* and automatic mode. When the system is in manual mode, the control algorithm 
* produces a control signal that may be different from the manually generated 
* control signal. It is necessary to make sure that the two outputs coincide at 
* the time of switching. This is called bumpless transfer and its given by 
*
* <center> \f$ v(t) = \int [ K_{T}m(t) + c(t-1) ]dt\f$ </center>
*
* @section qpid_create Creating a PID Controller
*
* Before you start using a controller, it must be instantiated first
* via the \ref qPID_controller_t type and then configured using the \ref qPID_Setup() API, 
* where you can define the PID gains and time step.
*
*  Example: Instantiating an configuring a PID controller:
*  @code{.c}
*  qPID_controller_t control;
*  const float kc = 1.0f, ki = 0.1f, kd = 0.0f;
*  const float dt = 0.01f; // time-step of 10mS
*  int ret;
*
*  ret = qPID_Setup( &control, kc, ki, kd, dt );
*  if ( 0 == ret ) {
*      // error, pid controller cant be configured
*  }
*  @endcode
*
*
*  @section qfpid_usage Usign the controller
*
*  The following example illustrates how a PID controller can be used to regulate
*  the speed of a DC motor. PID control operates on a separate task running
*  periodically at a rate of 50mS. The speed measurement is being read through
*  an analog input and then scaled to the appropriate units (RPM). The \ref qPID_Control() 
*  function will be in charge of computing the control action and  updating the internal
*  states of the controller. Then, the control output gets scaled-back in order to
*  send the control command by using the PWM(Pulse Width Modulation) module. 
*
*  @subsection qpid_ex1 Example: Speed control using a PID controller:
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  
*  const TickType_t  dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  float SetPoint = 300.0f; // desired motor speed 300rpm
*  
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      float processMeasurement;
*      float controlOutput;
*      for ( ;; ) {
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, SetPoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      int ret;
*      
*      BSP_SystemInit();
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 ,NULL );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*
*
* @section qpid_mrac Additive MRAC (Model Reference Adaptive Control)
*
* Model Reference Adaptive Control (MRAC) is a strategy where the controller 
* of the closed-loop is adapted by an adjustment mechanism, which takes \f$ y_{m}(t) \f$ 
* from a reference model as input and tries to adjust the controller output \f$v(t)\f$. 
* The adjustment mechanism used by \ref qpid is the enhanced MIT-rule approach,
* which adapts a feed-forward gain by the error between the system \f$ y(t) \f$
* and a reference model \f$ y_{m}(t) \f$, therefore is the so-called Gradient approach.
*
* <center>
* \f$ e_{m}(t) = y(t) - y_{m}(t)\f$ 
*
* \f$ \delta(t) = -\gamma  \frac{ e_{m}(t) y_{m}(t) }{ \beta + y_{m}^{2}(t)  }  \f$ 
* </center>
*
* where \f$\gamma(t)\f$ is the adaptation gain and \f$\beta(t)\f$ is introduced 
* to remove the problem of the possible division by zero if \f$y_{m}^{2}(t) \f$
* gets too small. 
*
* The MRAC adaptation is then computed by integrating the \f$\delta(t)\f$ term 
* as follows:
*
* <center> \f$ \psi(t) = \int [ \delta(t) + c(t) ] dt \f$ </center>
*
* This method can be used to adapt to slower changes but can become unstable for
* abrupt changes to the system. Therefore, this implementation uses a so called 
* modified MRAC (M-MRAC) where the adaptation is later added to a PID controller, 
* being the MRAC the additive loop.
* 
* Abrupt changes to the system are absorbed by the  PID controller, while the 
* change of the dynamics will still be handled by the MIT gain \f$\psi(t)\f$. 
* This results in the equation of the control function presented at the 
* beginning of this section.
*
* To use the additive MRAC, you should first instantiate a reference model and 
* then, enable the MRAC by using the \ref qPID_SetMRAC() API. Here, you must provide
* a pointer to the output of the reference model and the adaptation gain \f$\gamma(t)\f$
*
*  @subsection qpid_ex2 Example: Speed control with PID controller with an additive MRAC:
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  #include "qltisys.h" //to create the reference model
*  
*  #define REF_MODEL_ORDER   ( 1 )
*
*  const TickType_t dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      qLTISys_t ref_model;
*      float num[ REF_MODEL_ORDER+1 ] = { 0.0f, 1.0f, };
*      float den[ REF_MODEL_ORDER+1 ] = { 3.0f, 1.0f, };
*      float processMeasurement;
*      float SetPoint = 300.0f; // desired motor speed 300rpm
*      float refmodel_output = 0.0f;
*      float controlOutput = 0.0f;
*
*      qLTISys_Setup( &ref_model, num, den, x, 0, REF_MODEL_ORDER+1, (float)dt/1000.0f ) );
*      qPID_SetMRAC( controller, &refmodel_output, 0.01f );
*      for ( ;; ) {
*          refmodel_output = qLTISys_Excite( &ref_model, controlOutput );
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, SetPoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) );
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      int ret;
*      
*      BSP_SystemInit( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 ,NULL );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*
* @section qpid_autotune Autotunning
*
* Autotuning can eliminate much of the trial and error of a manual tuning 
* approach, especially if you do not have a lot of loop tuning experience. 
* Performing the autotuning procedure will get the tuning parameters close to 
* their optimal values, but additional manual tuning may be required to get 
* the tuning parameters to their optimal values.
*
* The Autotune feature for the controller will only run for a limited amount of time
* after it gets enabled. In other words, autotuning does not run continuously 
* during operation. Whenever there is a substantial change in the process 
* dynamics, the tuning process will need to be repeated in order to derive new 
* gains required for optimal control.
*
* Autotunning is performed by using the following recursive algorithm:
*
* <center>
* \f$ L(t) =  \frac{ P(t-1)\phi }{ \lambda + \phi^{T}P(t-1)\phi  } \f$
*
* \f$\theta(t) = \theta(t-1) + L[ y(t) - \phi^{T}\theta(t)  ] \f$
*
* \f$ P(t) = \lambda^{-1}[ I - L(t)+\phi^{T}]P(t-1) \f$
*
* \f$ \theta(t) = \begin{bmatrix} \theta_{1}(t) & \theta_{2}(t) \end{bmatrix}^T  \f$ 
* and \f$ \phi(t) = \begin{bmatrix} -y(t-1) & u(t-1) \end{bmatrix}^T  \f$ 
*
* \f$ g(t) = \frac{ (1 - \mu)\theta_{2}(t) }{ 1 + \theta_{1} } + \mu g(t-1)  \f$
*
* \f$ \tau(t) = \frac{ ( \mu - 1 )dt }{ ln( |\theta_{1}| ) } + \mu \tau(t-1)  \f$
*
* \f$ K_{c}(t) = \alpha \frac{ r_{2} \tau(t) }{ g(t)dt } \f$
*
* \f$ K_{i}(t) = \alpha \frac{ g(t)[ 0.54 + 0.33r_{1} ] }{ r_{2}dt } \f$
*
* \f$ K_{c}(t) = \alpha \frac{ K_{c}(t)dt }{ r_{2} } \f$
* </center>
*
* where  \f$ r_{1} = dt/\tau(t) \f$  and \f$ r_{2} = 1.35 + 0.25r_{1} \f$ 
*
* and the remaining parameters \f$\mu\f$, \f$\alpha\f$, \f$\lambda\f$ are internally
* computed for best performance.
*
* @subsection qpid_autotune_usage Autotunning Usage
*
* In order to use the autotuner, you must first instantiate the \ref qPID_AutoTunning_t
* object and bind it to a previously configured PID controller by using the 
* \ref qPID_BindAutoTunning().
*
* After this, you can enable auto tuning via \ref qPID_EnableAutoTunning() 
* for a defined number of intervals. When the autotune ends, the resulting PID
* gains will be applied to the bounded controller.
* 
* @subsection qpid_ex3 Example: Speed control with PID controller and autotunning:
* This example takes avantage of the FreeRTOS task notifications to enable the
* autotunningm when a rising-edge is detected on a certain digital input. Autotuning
* is enabled for 5 sec. Note that the setpoint is briefly modified during this 
* process to stimulate the process. Upon completion, the setpoint is restored to 
* its original value.
*
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  
*  #define REF_MODEL_ORDER   ( 1 )
*
*  const TickType_t dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  TaskHandle_t pid_task;
*  
*  void gpio_Int_Handler( void ) 
*  {
*      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*      vTaskNotifyGiveFromISR( pid_task, &xHigherPriorityTaskWoken);
*      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
*      HAL_GPIO_ClearStatusFlag();
*  }
*
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      float processMeasurement;
*      float SetPoint = 300.0f; // desired motor speed 300rpm
*      float tmpSetPoint = 320.0f;
*      float *p_setpoint  = &SetPoint;  
*      float refmodel_output = 0.0f;
*      float controlOutput = 0.0f;
*      uint32_t notification_autotune_enable;
*
*      qLTISys_Setup( &ref_model, num, den, x, 0, REF_MODEL_ORDER+1, (float)dt/1000.0f ) );
*      qPID_SetMRAC( controller, &refmodel_output, 0.01f );
*      for ( ;; ) {
*          notification_autotune_enable = ulTaskNotifyTake( pdTRUE, 0 ); // dont wait
*          if ( notification_autotune_enable ) {
*              p_setpoint = &tmpSetPoint; 
*              qPID_EnableAutoTunning( controller, 100 ); //enable for 5 seconds ( 100*50mS )
*          }
*          if ( qPID_AutoTunningComplete( controller) ) {
*              p_setpoint = &SetPoint;
*              qPID_EnableAutoTunning( controller, 0uL ); //disable
*          }
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, *p_setpoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      qPID_AutoTunning_t at;
*      int ret;
*      
*      BSP_SystemInit( );
*      HAL_GPIO_Enable( GPIO12, GPIO_INPUT );
*      HAL_GPIO_SetInterruptMode( GPIO12, RISING_EDGE );
*      HAL_GPIO_EnableInterrupts( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      qPID_BindAutoTunning( &speedControl, &at );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 , &pid_task );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*/